name: API Tests

on: [push]

jobs:
  postman-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgis/postgis:16-3.4  # PostGIS-enabled image
        env:
          POSTGRES_DB: agrotech_db
          POSTGRES_USER: snipher
          POSTGRES_PASSWORD: snipher8431
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          gdal-bin \
          libgdal-dev \
          postgresql-client \
          libgeos-dev \
          libproj-dev

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install Python dependencies
      env:
        GDAL_VERSION: $(gdal-config --version)
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install GDAL==$(gdal-config --version)

    - name: Create PostGIS extension
      env:
        PGHOST: localhost
        PGPORT: 5432
        PGDATABASE: agrotech_db
        PGUSER: snipher
        PGPASSWORD: snipher8431
      run: |
        psql -c "CREATE EXTENSION IF NOT EXISTS postgis;"

    - name: Run migrations
      env:
        DATABASE_NAME: agrotech_db
        DATABASE_USER: snipher
        DATABASE_PASSWORD: snipher8431
        DATABASE_HOST: localhost
        DATABASE_PORT: 5432
      run: |
        python manage.py migrate

    - name: Install Newman
      run: npm install -g newman

    - name: Run Server & Tests
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DATABASE_NAME: agrotech_db
        DATABASE_USER: snipher
        DATABASE_PASSWORD: snipher8431
        DATABASE_HOST: localhost
        DATABASE_PORT: 5432
      run: |
        # Start server in background
        python manage.py runserver 127.0.0.1:8000 &
        
        # Wait for server to start
        sleep 15
        
        # Run Postman tests
        newman run postman/coldstore-api.postman_collection.json \
          -e postman/postman-environment.json \
          --reporters cli,json \
          --reporter-json-export newman-results.json
        
        # Fail build on test failures
        if [ $? -ne 0 ]; then
          echo "Tests failed!"
          exit 1
        fi

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: newman-results
        path: newman-results.json